<?xml version="1.0"?><!--
    Copyright 2011 Hippo Licensed under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License. You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0 Unless required by
    applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
    OR CONDITIONS OF ANY KIND, either express or implied. See the
    License for the specific language governing permissions and
    limitations under the License.
  --><!DOCTYPE document PUBLIC "-//Apache Software Foundation//DTD XDOC 1.0//EN"
  "http://maven.apache.org/dtd/xdoc_1_0.dtd">
<document>
  <properties>
    <title>About Demo Project for Apache Camel - Hippo Event Bus Support</title>
  </properties>
  <body>

    <section name="About Demo Project for Apache Camel - Hippo Event Bus Support">

      <subsection name="Overview">
        <p>
          <strong>Apache Camel - Hippo Event Bus Support</strong> component provides proper solutions
          for the architectural needs where you should update data in the external system
          on document events (such as publication/depublication) in Hippo CMS system.
        </p>
        <p>
          The external systems may include the following in practice:
        </p>
        <ul>
          <li>Enterprise Search Engine (which has existed for search needs, integrating various systems)</li>
          <li>Content Caching Services (which requires proper cache invaliation calls by other systems)</li>
          <li>and more</li>
        </ul>
        <p>
          The most popular scenario is integrating with the existing Enterprise Search Engine.
          Hippo CMS is required to update search index data based on document publication/depublication events mostly,
          as shown in the diagram below.
        </p>
        <img src="images/use_cases_overview1.png" alt="Use Cases Overview" />
        <p>
          If you implement an event listener registered to <a href="http://www.onehippo.org/library/concepts/hippo-services/event-bus.html" target="_blank">Hippo Event Bus</a>,
          then it should look like almost the same as the diagram shown above.
          The event listener can probably invoke the external search engine (e.g, through either REST service or direct API call)
          directly in this approach.
        </p>
        <p>
          However, this approach could bring the following architectural questions:
        </p>
        <ul>
          <li>
            <strong>Reliability</strong>:
            if the external system becomes unavailable at some moment for some reasons,
            then it may lose the event messages. How can we guarantee all the events processed?
          </li>
          <li>
            <strong>Performance</strong>:
            if invocations on the external system may take longer than expected at some moment for some reasons,
            then it may affect the performance (e.g, response time) in the CMS Frontend Application
            and the user experiences. How can we process the events asynchronously?
          </li>
          <li>
            <strong>Modifiability</strong>:
            we would like to focus only on our business logic instead of spending time on learning and maintaining
            <a href="http://www.onehippo.org/library/concepts/hippo-services/event-bus.html" target="_blank">Hippo Event Bus</a>
            event listeners Java code ourselves.
          </li>
          <li>
            <strong>Maintainability</strong>:
            we would like to monitor the event processing and be able to turn it on/off.
            If we implement event listener Java code ourselves for the features, then it would increase complexity a lot.
            How can we achieve that?
          </li>
          <li>and more</li>
        </ul>
        <p>
          <strong>Apache Camel - Hippo Event Bus Support</strong> component is now provided to answer all those questions properly.
        </p>
        <p>
          And this demo project shows real simplified solutions for the following scenarios:
        </p>
        <ul>
          <li><a href="demo-solr-integration.html">Scenario 1: Solr Search Engine Integration</a></li>
          <li><a href="demo-es-integration.html">Scenario 2: ElasticSearch Search Engine Integration</a></li>
          <li><a href="demo-integration-activemq.html">Scenario 3: Running with ActiveMQ</a></li>
        </ul>
        <p>
          The first scenario demonstrates integration with an Apache Solr search engine (as embedded as war).
          It is recommended to see this example first because it doesn't require any other software installation and configuration.
        </p>
        <p>
          The second scenario demonstrates the same integration approach as the first scenario, but with ElasticSearch engine
          instead of Apache Solr search engine.
        </p>
        <p>
          The third scenario demonstrates integration with either Apache Solr or ElasticSearch engine
          with using ActiveMQ as message queueing solution instead of file-based inbox folder polling.
        </p>
      </subsection>

      <subsection name="Build Demo Project">
        <p>
          You can build and run the demo project with Maven and
          run the demo applications locally with Maven Cargo Plugin (Apache Tomcat embedded).
        </p>
        <p>
          You can check out, build and run the demo application like the following:
        </p>
        <div class="brush: bash">
        <source><![CDATA[
$ svn co https://forge.onehippo.org/svn/camel-hippoevt/camel-hippoevt-demo/trunk camel-hippoevt-demo
$ cd camel-hippoevt-demo
$ mvn clean package
$ mvn -P cargo.run
        ]]></source>
        </div>
      </subsection>

      <subsection name="Web Applications in Demo Project">
        <p>
          If you run the Demo project, then you will see the following web applications by default:
        </p>
        <ul>
          <li><strong>CMS (/cms)</strong>: Hippo CMS Content Production Web Application</li>
          <li><strong>SITE (/site)</strong>: Hippo CMS Content Delivery Web Application</li>
          <li>
            <strong>Hawtio (/hawtio)</strong>: <a href="http://hawt.io/" target="_blank">Web console for managing
            your Java stuff (including Camel, Tomcat, JMX, etc)</a>
          </li>
          <li><strong>Solr (/solr)</strong>: <a href="http://lucene.apache.org/solr/" target="_blank">Apache Solr</a> Search Engine Web Application</li>
        </ul>
      </subsection>

    </section>

  </body>
</document>

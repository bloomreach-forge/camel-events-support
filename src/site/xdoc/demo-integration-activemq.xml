<?xml version="1.0" encoding="UTF-8"?>
<!--
    Copyright 2024 Bloomreach B.V. (https://www.bloomreach.com)

    Licensed under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License. You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0 Unless required by
    applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
    OR CONDITIONS OF ANY KIND, either express or implied. See the
    License for the specific language governing permissions and
    limitations under the License.
  -->
<document>
  <properties>
    <title>Demo 3: Running with ActiveMQ</title>
  </properties>
  <body>

    <section name="Demo 3: Running with ActiveMQ">

      <subsection name="Overview">
        <p>
        </p>

        <table>
          <tr>
            <th>Route name</th>
            <th>Description</th>
          </tr>
          <tr>
            <td>
              Route-HippoEventBus-to-Queue
            </td>
            <td>
              Receives an HippoEventBus event and store it into a file under the inbox folder.
            </td>
          </tr>
        </table>
        <p>
          <img src="images/hippoevt-to-queue.png" alt="Hippo Event to File" />
        </p>

        <table>
          <tr>
            <th>Route name</th>
            <th>Description</th>
          </tr>
          <tr>
            <td>
              Route-Queue-to-Rest
            </td>
            <td>
              Polls the inbox folder to read a JSON message file and invokes the specified REST service URL.
            </td>
          </tr>
        </table>
        <p>
          <img src="images/queue-to-rest.png" alt="Hippo Event to File" />
        </p>
      </subsection>

      <subsection name="Install and Run ActiveMQ locally">

        <p>
          To test this scenario, it is required to run <a href="http://activemq.apache.org/" target="_blank">Apache Active MQ</a> locally.
          So, the demo project will be able to demonstrate how a Hippo document workflow publish/depublish event can be delivered
          as JSON message to a queue in your Apache ActiveMQ server.
        </p>
        <p>
          The demo project expects the Apache ActiveMQ server running at the default port, 61616, by default.
        </p>
        <p>
          To install Apache ActiveMQ, please follow the guide in <a href="http://activemq.apache.org/getting-started.html" target="_blank">http://activemq.apache.org/getting-started.html</a>.
          But, here are simplified steps for this demo testing purpose only:
        </p>
        <ol>
          <li>
            Download the latest ActiveMQ binary from 
            <a href="http://activemq.apache.org/download.html" target="_blank">http://activemq.apache.org/download.html</a>.
          </li>
          <li>
            Extract the downloaded archive file to the project root folder.
            So, for example, you will have 'apache-activemq-x.x.x' subfolder in the project root folder.
          </li>
          <li>
            Open a new command line console and move to ./apache-activemq-x.x.x/bin/ folder.
          </li>
          <li>
            Run the following to start in console mode (You can type Ctrl+C to stop it):
            <br/>
            <br/>
            <code>$ ./activemq console</code>
            <br/>
            <br/>
          </li>
          <li>
            You can check/monitor messages in the ActiveMQ Admin Console.
            Visit <a href="http://localhost:8161/admin/" target="_blank">http://localhost:8161/admin/</a>
            (Login by admin/admin by default).
          </li>
        </ol>
      </subsection>

      <subsection name="Running the Demo">
        <p>
          You can build and install the module first with Maven.
        </p>
        <div class="brush: bash">
        <source><![CDATA[
$ mvn clean install
        ]]></source>
        </div>
        <p>
          To test this scenario with Apache Solr, execute the following in the demo project's root folder:
        </p>
        <div class="brush: bash">
        <source><![CDATA[
$ cd demo
$ mvn clean verify
$ mvn -P cargo.run -Dcargo.jvm.args="-Dsearch.engine=solr -Droutes.mode=queue"
        ]]></source>
        </div>
        <p>
          <em>Note: </em> You should run the Apache Solr separately before running the above command.
          Follow <a href="demo-solr-integration.html">Demo 1: Solr Search Engine Integration</a> page for detail first.
        </p>
        <p>
          You can also test the scenario with ElasticSearch integration as well:
        </p>
        <div class="brush: bash">
        <source><![CDATA[
$ cd demo
$ mvn clean verify
$ mvn -P cargo.run -Dcargo.jvm.args="-Dsearch.engine=es -Droutes.mode=queue"
        ]]></source>
        </div>
        <p>
          <em>Note: </em> You should run the ElasticSearch separately before running the above command.
          Follow <a href="demo-es-integration.html">Demo 2: ElasticSearch Search Engine Integration</a> page for detail first.
        </p>
      </subsection>

      <subsection name="Testing the Demo">
        <p>
          In CMS UI, try to open a published document and take it offline and re-publish the document.
        </p>
        <p>
          <img src="images/cms-publish.png" alt="Publishsing a document in CMS" />
        </p>
        <p>
          Now, try to search the content in the Search Engine's UIs or tools.
        </p>
        <p>
          <img src="images/solr-search.png" alt="Querying in Search Engine Frontend" />
        </p>
        <p>
          Retry to take a document offline or publish an unpublished document and see those synchronized in the
          search engines properly.
        </p>
        <p>
          You can also monitor how ActiveMQ is doing at <a href="http://localhost:8161/admin/" target="_blank">http://localhost:8161/admin/</a>.
        </p>
        <p>
          <img src="images/activemq-admin.png" alt="Querying in Search Engine Frontend" />
        </p>
      </subsection>

      <subsection name="Camel Context Configuration in the demo project">
        <p>
          The CamelContext configuration is placed in cms/WEB-INF/camel/routes-with-activemq.xml like the following example
          which is initiated by <code>org.springframework.web.context.ContextLoaderListener</code> defined in
          a &lt;listener&gt; element in cms/WEB-INF/web.xml.
        </p>
        <div class="brush: xml">
        <source><![CDATA[
  <camelContext xmlns="http://camel.apache.org/schema/spring">

    <route id="Route-HippoEventBus-to-Queue">

      <!-- Subscribe publish/depublish events as JSON from HippoEventBus. -->
      <from uri="hippoevent:?category=workflow&amp;action=publish,depublish" />

      <!-- Convert the JSON message to String. -->
      <convertBodyTo type="java.lang.String" />

      <!-- Send the JSON string message to the queue named 'hippo'. -->
      <to uri="activemq:queue:hippo" />

    </route>

    <route id="Route-Queue-to-REST">

      <!-- Receive message from the queue named 'hippo'. -->
      <from uri="activemq:queue:hippo" />

      <!-- Convert the file message to String. -->
      <convertBodyTo type="java.lang.String" />

      <!-- Convert the JSON string to JSON object. -->
      <convertBodyTo type="net.sf.json.JSON" />

      <!-- Set HTTP header to 'POST'. -->
      <setHeader name="CamelHttpMethod">
        <constant>POST</constant>
      </setHeader>

      <!-- Set HTTP query string based on the workflow event message. -->
      <choice>
        <when>
          <simple>${body[action]} == 'publish'</simple>
          <setHeader name="CamelHttpQuery">
            <simple>action=index&amp;id=${body[subjectId]}</simple>
          </setHeader>
        </when>
        <when>
          <simple>${body[action]} == 'depublish'</simple>
          <setHeader name="CamelHttpQuery">
            <simple>action=delete&amp;id=${body[subjectId]}</simple>
          </setHeader>
        </when>
      </choice>

      <!-- Invoke the Search Index synchronization REST service. -->
      <to uri="http://localhost:8080/site/restapi/{{search.engine}}/update/" />

    </route>

  </camelContext>
        ]]></source>
        </div>
      </subsection>

    </section>

  </body>
</document>

<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright 2025 Bloomreach B.V. (https://www.bloomreach.com)

  Licensed under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0 Unless required by
  applicable law or agreed to in writing, software distributed under
  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
  OR CONDITIONS OF ANY KIND, either express or implied. See the
  License for the specific language governing permissions and
  limitations under the License.
-->
<document>
  <properties>
    <title>Hippo Event Component</title>
  </properties>
  <body>

    <section name="Hippo Event Component">
      <p>
        The <strong>hippoevent:</strong> component allows you to subscribe events from 
        <a href="https://xmdocumentation.bloomreach.com/library/concepts/services/event-bus.html" target="_blank">Event Bus</a>.
      </p>
      <p>
        The <strong>hippoevent:</strong> component subscribes the following types of <code>HippoEvent</code>
        and transforms it to a <code>JSONObject (org.json.JSONObject)</code> as message exchange body:
      </p>
      <ul>
        <li><code>org.onehippo.cms7.event.HippoEvent</code></li>
        <li><code>org.onehippo.cms7.event.HippoSecurityEvent</code></li>
        <li><code>org.onehippo.repository.events.HippoWorkflowEvent</code></li>
        <li><code>org.hippoecm.repository.standardworkflow.FolderWorkflowEvent</code></li>
      </ul>
      <p>
        For details on how it translates <code>HippoEvent</code> to a <code>JSONObject</code>,
        please see the JSON message example shown below and the converter source code:
        <a href="xref/org/onehippo/forge/camel/component/hippo/HippoEventConverter.html" target="_blank">HippoEventConverter.java</a>.
      </p>
      <p>
        Maven users will need to add the following repository configuration and dependency to their pom.xml to use this component:
      </p>
      <div class="brush: xml">
      <source><![CDATA[
    <repository>
      <id>bloomreach-maven2-forge</id>
      <name>Bloomreach Maven 2 Forge</name>
      <url>https://maven.bloomreach.com/repository/maven2-forge/</url>
    </repository>
      ]]></source>
      </div>
      <div class="brush: xml">
      <source><![CDATA[
      <dependency>
        <groupId>com.bloomreach.forge.camel-hippoevt</groupId>
        <artifactId>camel-hippoevt</artifactId>
        <version>${camel-hippoevt.version}</version>
      </dependency>
      ]]></source>
      </div>

      <br/>

      <div class="alert alert-warning">
        <p><em>NOTE:</em> the Maven coordinate of the module has been changed to
           <code>com.bloomreach.forge.camel-hippoevt:camel-hippoevt</code> since version 3.0.</p>
        <p>
          For the previous versions, please use the groupId
          <code>org.onehippo.forge.camel-hippoevt</code> instead.
        </p>
      </div>

      <subsection name="URI Format">
        <div class="brush: plain">
        <source><![CDATA[
hippoevent:
        ]]></source>
        </div>
      </subsection>

    </section>

    <section name="Usage">
      <subsection name="Consumer">
        <p>
          The consumer will register an event listener in Hippo Event Bus.
        </p>
        <p>
          You can specify parameters like the following:
        </p>
        <table>
          <tr>
            <th>Name</th>
            <th>Default Value</th>
            <th>Description</th>
          </tr>
          <tr>
            <td>_persisted</td>
            <td>false</td>
            <td>
              Flag whether or not to register listeners for persisted events from Hippo Repository via Hippo Event Bus.
            </td>
          </tr>
          <tr>
            <td>_channelName</td>
            <td>&nbsp;</td>
            <td>
              Applied to a persisted event listener only.
              <br/>
              The listener's channel name is used to identify the listener after a restart, and it should be unique in the container.
            </td>
          </tr>
          <tr>
            <td>_onlyNewEvents</td>
            <td>true</td>
            <td>
              Applied to a persisted event listener only.
              <br/>
              Flag whether or not to receive only new events from Hippo Repository via Hippo Event Bus.
            </td>
          </tr>
          <tr>
            <td>category</td>
            <td>&nbsp;</td>
            <td>
              Comma separated category names. Only an event having any of the specified category value will be received.
              <br/>
              See <code>org.onehippo.cms7.event.HippoEventConstants</code> for available cateogries.
              <br/>
              Note: If the consumer is for persisted events with '_persisted=true', then the first argument of this category parameter
              will be used in <code>PersistedHippoEventListener#getEventCategory()</code>.
            </td>
          </tr>
          <tr>
            <td>action</td>
            <td>&nbsp;</td>
            <td>
              Comma separated action names. Only an event having any of the specified action value will be received.
              <br/>
              See <code>org.onehippo.cms7.event.HippoEvent</code> for detail.
            </td>
          </tr>
          <tr>
            <td>application</td>
            <td>&nbsp;</td>
            <td>
              Comma separated application names. Only an event having any of the specified application value will be received.
              <br/>
              See <code>org.onehippo.cms7.event.HippoEvent</code> for detail.
            </td>
          </tr>
          <tr>
            <td>user</td>
            <td>&nbsp;</td>
            <td>
              Comma separated user names. Only an event having any of the specified user value will be received.
              <br/>
              See <code>org.onehippo.cms7.event.HippoEvent</code> for detail.
            </td>
          </tr>
          <tr>
            <td>methodName</td>
            <td>&nbsp;</td>
            <td>
              Comma separated method names. Only an event having any of the specified method name value will be received.
              <br/>
              See <code>org.onehippo.cms7.event.HippoEvent</code> for detail.
            </td>
          </tr>
        </table>
        <p>
          So, for example, if you set the parameters like the following example,
          then the hippoevent: component will consume a <code>HippoEvent</code> object
          only when the 'category' property value of the <code>HippoEvent</code> object is 'workflow'
          and the 'application' propery value is either 'cms' or 'site'.
        </p>
        <div class="brush: javascript">
        <source><![CDATA[
          hippoevent:?category=workflow&application=cms,site
          ]]></source>
        </div>
        <p>
          You will see all the available property names (which can be used as parameter names as well) below.
        </p>
        <p>
          The message body received by the consumer is a <code>org.json.JSONObject</code> instance
          which should look like the following examples:
        </p>
        <p>
          <strong><em>Note: </em></strong>The comment blocks (which are actually disallowed in JSON format) are only for description purpose.
          At runtime, the comments are not included.
        </p>
        <div class="brush: javascript">
        <source><![CDATA[
  {

    // metadata property names start with '_'.

    // A HippoEvent class name: "org.onehippo.cms7.event.HippoEvent",
    //                          "org.onehippo.repository.events.HippoWorkflowEvent",
    //                          "org.hippoecm.repository.standardworkflow.FolderWorkflowEvent", or
    //                          "org.onehippo.cms7.event.HippoSecurityEvent".
    "_eventClassName" : "org.onehippo.cms7.event.HippoEvent";

    // Properties of org.onehippo.cms7.event.HippoEvent:
    "action" : "...",                          // See HippoEvent#action()
    "application" : "...",                     // HippoEvent#application()
    "category" : "...",                        // See HippoEvent#category()
    "sealed" : false,                          // See HippoEvent#isSealed()
    "message" : "...",                         // See HippoEvent#message()
    "result" : "...",                          // See HippoEvent#result()
    "system" : false,                          // See HippoEvent#system()
    "timestamp" : 1234567890,                  // See HippoEvent#timestamp()
    "user" : "...",                            // See HippoEvent#user()

    // Properties in case of org.onehippo.repository.events.HippoWorkflowEvent
    "arguments" : [ "value1", ..., "valueN" ], // See HippoWorkflowEvent#arguments()
    "className" : "...",                       // See HippoWorkflowEvent#className()
    "exception" : "...",                       // HippoWorkflowEvent#exception()#toString()
    "interaction" : "...",                     // See HippoWorkflowEvent#interaction()
    "interactionId" : "...",                   // See HippoWorkflowEvent#interactionId()
    "methodName" : "...",                      // See HippoWorkflowEvent#methodName()
    "returnType" : "...",                      // See HippoWorkflowEvent#returnType()
    "returnValue" : "...",                     // See HippoWorkflowEvent#returnValue()
    "subjectId" : "...",                       // See HippoWorkflowEvent#subjectId()
    "subjectPath" : "...",                     // See HippoWorkflowEvent#subjectPath()
    "workflowCategory" : "...",                // See HippoWorkflowEvent#workflowCategory()
    "workflowName" : "...",                    // See HippoWorkflowEvent#workflowName()
    "documentType" : "ns1:news",               // See HippoWorkflowEvent#documentType()
    "documentPath" : "...",                    // See HippoWorkflowEvent#documentPath()
    "handleUuid" : "...",                      // See HippoWorkflowEvent#handleUuid()

    // Properties in case of org.hippoecm.repository.standardworkflow.FolderWorkflowEvent:
    "type" : "...",                            // FolderWorkflowEvent#type()#toString()

    // Properties in case of org.onehippo.cms7.event.HippoSecurityEvent:
    "success" : true,                          // See HippoSecurityEvent#exception()

  }
          ]]></source>
        </div>
      </subsection>
    </section>

    <section name="Examples">
      <p>
        The following code will register a local EventListener in Hippo Event Bus.
        And it will consume <code>HippoEvent</code> only when the 'category' property value is 'workflow'
        and the 'action' property value is either 'publish' or 'depublish'.
      </p>
      <div class="brush: xml">
      <source><![CDATA[
<route>
  <from uri="hippoevent:?category=workflow&amp;action=publish,depublish" />
  <to uri="direct:execute-reaction" />
</route>
        ]]></source>
      </div>
      <p>
        The following code will register a persisted EventListener in Hippo Event Bus.
        And it will consume <code>HippoEvent</code> only when the 'category' property value is 'workflow'
        and the 'action' property value is either 'publish' or 'depublish'.
      </p>
      <div class="brush: xml">
      <source><![CDATA[
<route>
  <from uri="hippoevent:?_persisted=true&amp;_channelName=mylistener&amp;category=workflow&amp;action=publish,depublish" />
  <to uri="direct:execute-reaction" />
</route>
        ]]></source>
      </div>
    </section>

    <section name="See Also in Apache Camel Site">
      <ul>
        <li><a href="https://camel.apache.org/manual/configuring-route-startup-ordering-and-autostartup.html" target="_blank">Configuring Camel</a></li>
        <li><a href="https://camel.apache.org/manual/component.html" target="_blank">Component</a></li>
        <li><a href="https://camel.apache.org/manual/Endpoint-dsl.html" target="_blank">Endpoint</a></li>
        <li><a href="https://camel.apache.org/camel-core/getting-started/index.html" target="_blank">Getting Started</a></li>
      </ul>
    </section>

  </body>
</document>
